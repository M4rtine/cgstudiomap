#!/usr/bin/python2

import sys

sys.path[0:0] = [
  '/opt/cgstudiomap/eggs/Babel-2.3.4-py2.7.egg',
  '/opt/cgstudiomap/eggs/Django-1.9.6-py2.7.egg',
  '/opt/cgstudiomap/eggs/Jinja-1.2-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/Mako-1.0.4-py2.7.egg',
  '/opt/cgstudiomap/eggs/MarkupSafe-0.23-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/Pillow-3.2.0-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/PyChart-1.39-py2.7.egg',
  '/opt/cgstudiomap/eggs/PyYAML-3.11-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/Python_Chart-1.39-py2.7.egg',
  '/opt/cgstudiomap/eggs/Shapely-1.5.15-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/Werkzeug-0.11.9-py2.7.egg',
  '/opt/cgstudiomap/eggs/argparse-1.4.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/datadog-0.11.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/decorator-4.0.9-py2.7.egg',
  '/opt/cgstudiomap/eggs/docutils-0.12-py2.7.egg',
  '/opt/cgstudiomap/eggs/feedparser-5.2.1-py2.7.egg',
  '/opt/cgstudiomap/eggs/funcsigs-1.0.2-py2.7.egg',
  '/opt/cgstudiomap/eggs/geojson-1.3.2-py2.7.egg',
  '/opt/cgstudiomap/eggs/gevent-1.1.1-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/greenlet-0.4.9-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/lxml-3.6.0-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/mock-2.0.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/num2words-0.5.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/passlib-1.6.5-py2.7.egg',
  '/opt/cgstudiomap/eggs/phonenumbers-7.4.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/psutil-4.2.0-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/psycogreen-1.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/psycopg2-2.6.1-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/pyPdf-1.13-py2.7.egg',
  '/opt/cgstudiomap/eggs/pyserial-3.0.1-py2.7.egg',
  '/opt/cgstudiomap/eggs/python_dateutil-2.5.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/python_ldap-2.4.25-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/python_openid-2.2.5-py2.7.egg',
  '/opt/cgstudiomap/eggs/python_stdnum-1.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/pygeocoder-1.2.5-py2.7.egg',
  '/opt/cgstudiomap/eggs/pytz-2016.4-py2.7.egg',
  '/opt/cgstudiomap/eggs/pysub-0.2-py2.7.egg',
  '/opt/cgstudiomap/eggs/qrcode-5.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/raven-5.18.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/reportlab-3.3.0-py2.7-linux-x86_64.egg',
  '/usr/lib/python2.7/dist-packages',
  '/opt/cgstudiomap/eggs/simplejson-3.8.2-py2.7-linux-x86_64.egg',
  '/opt/cgstudiomap/eggs/traceback2-1.4.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/unittest2-1.1.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/xlwt-1.0.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/cachetools-1.1.6-py2.7.egg',
  '/opt/cgstudiomap/eggs/contextlib2-0.5.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/slack_log_handler-0.2.2-py2.7.egg',
  '/opt/cgstudiomap/eggs/validate_email-1.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/anybox.recipe.odoo-1.9.1-py2.7.egg',
  '/opt/cgstudiomap/eggs/Jinja2-2.8-py2.7.egg',
  '/opt/cgstudiomap/eggs/pydot-1.0.29-py2.7.egg',
  '/opt/cgstudiomap/eggs/pyparsing-1.5.7-py2.7.egg',
  '/opt/cgstudiomap/eggs/pyusb-1.0.0-py2.7.egg',
  '/opt/cgstudiomap/eggs/vatnumber-1.2-py2.7.egg',
  '/opt/cgstudiomap/eggs/vobject-0.9.2-py2.7.egg',
  '/opt/cgstudiomap/parts/odoo',
  '/opt/cgstudiomap/eggs/pbr-1.9.1-py2.7.egg',
  '/usr/local/lib/python2.7/dist-packages',
  '/opt/cgstudiomap/eggs/zc.recipe.egg-2.0.3-py2.7.egg',
  '/opt/cgstudiomap/eggs/linecache2-1.0.0-py2.7.egg',
  ]


from anybox.recipe.odoo.runtime.session import Session
session = Session('/opt/cgstudiomap/etc/odoo.cfg', '/opt/cgstudiomap')
if len(sys.argv) <= 1:
    print('To start the OpenERP working session, just do:')
    print('    session.open(db=DATABASE_NAME)')
    print('or, to use the database from the buildout part config:')
    print('    session.open()')
    print('All other options from buildout part config do apply.')
    print('Then you can issue commands such as')
    print("        session.registry('res.users').browse(session.cr, 1, 1)")


_interactive = True
if len(sys.argv) > 1:
    _options, _args = __import__("getopt").getopt(sys.argv[1:], 'ic:m:')
    _interactive = False
    for (_opt, _val) in _options:
        if _opt == '-i':
            _interactive = True
        elif _opt == '-c':
            exec(_val)
        elif _opt == '-m':
            sys.argv[1:] = _args
            _args = []
            __import__("runpy").run_module(
                 _val, {}, "__main__", alter_sys=True)

    if _args:
        sys.argv[:] = _args
        __file__ = _args[0]
        del _options, _args
        with open(__file__, 'U') as __file__f:
            exec(compile(__file__f.read(), __file__, "exec"))

if _interactive:
    del _interactive
    try:
        import IPython
    except ImportError:
        __import__("code").interact(banner="", local=globals())
    else:
        IPython.start_ipython(user_ns=globals())
